// Generated by CoffeeScript 1.6.3
var Project, app, client, decodeProject, encodeProject, generateID,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

client = new Dropbox.Client({
  key: '1n83me2ms50l6az'
});

client.authenticate(function(error, client) {
  if (error) {
    return console.log(error);
  }
});

generateID = function(n, list) {
  var k;
  return ((function() {
    var _results;
    _results = [];
    while ((!k) || __indexOf.call(list, k) >= 0) {
      _results.push(k = Math.random().toString(36).substr(2, n));
    }
    return _results;
  })()).toString();
};

decodeProject = function(project) {
  return JSON.parse(project);
};

encodeProject = function(name, users, tasks) {
  var project, task, user;
  project = {
    name: name,
    users: (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        user = users[_i];
        _results.push(user);
      }
      return _results;
    })(),
    tasks: (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = tasks.length; _i < _len; _i++) {
        task = tasks[_i];
        _results.push({
          id: task.id,
          name: task.name
        });
      }
      return _results;
    })()
  };
  return JSON.stringify(project);
};

app = angular.module('synappse', []);

Project = {
  name: 'project'
};

app.controller('main', function($scope) {
  var cache, project;
  cache = localStorage[Project.name] || encodeProject(Project.name, [], []);
  project = decodeProject(cache);
  $scope.users = project.users;
  client.getAccountInfo(function(error, user) {
    var u, _ref;
    if (_ref = user.name, __indexOf.call((function() {
      var _i, _len, _ref1, _results;
      _ref1 = $scope.users;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        u = _ref1[_i];
        _results.push(u.name);
      }
      return _results;
    })(), _ref) < 0) {
      return $scope.users.push({
        name: user.name,
        email: user.email
      });
    }
  });
  $scope.tasks = project.tasks;
  $scope.deletedTasks = localStorage[Project.name + '_deletedTasks'] || [];
  $scope.cache = function() {
    localStorage[Project.name] = encodeProject(Project.name, $scope.users, $scope.tasks);
    return localStorage[Project.name + '_deletedTasks'] = $scope.deletedTasks;
  };
  return $scope.sync = function() {
    return client.readFile('_app.json', function(error, data) {
      var distantIDs, localIDs, task, tasks, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      tasks = data ? (JSON.parse(data)).tasks : [];
      distantIDs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tasks.length; _i < _len; _i++) {
          task = tasks[_i];
          _results.push(task.id);
        }
        return _results;
      })();
      localIDs = (function() {
        var _i, _len, _ref, _results;
        _ref = $scope.tasks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          task = _ref[_i];
          _results.push(task.id);
        }
        return _results;
      })();
      $scope.tasks = (function() {
        var _i, _len, _ref, _ref1, _results;
        _ref = $scope.tasks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          task = _ref[_i];
          if (task.id.length === 2 || (_ref1 = task.id, __indexOf.call(distantIDs, _ref1) >= 0)) {
            _results.push(task);
          }
        }
        return _results;
      })();
      _ref = $scope.tasks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        if (task.id.length === 2) {
          task.id = generateID(3, distantIDs);
        }
      }
      for (_j = 0, _len1 = tasks.length; _j < _len1; _j++) {
        task = tasks[_j];
        if ((_ref1 = task.id, __indexOf.call(localIDs, _ref1) < 0) && (_ref2 = task.id, __indexOf.call($scope.deletedTasks, _ref2) < 0)) {
          $scope.tasks.push(task);
        }
      }
      $scope.deletedTasks = [];
      $scope.$apply();
      $scope.cache();
      project = encodeProject(Project.name, $scope.users, $scope.tasks);
      return client.writeFile('_app.json', project, function(error, stat) {
        if (error) {
          return console.log(error);
        }
      });
    });
  };
});

app.controller('tasks', function($scope) {
  return $scope.addTask = function() {
    var task;
    $scope.tasks.push({
      id: generateID(2, (function() {
        var _i, _len, _ref, _results;
        _ref = $scope.tasks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          task = _ref[_i];
          _results.push(task.id);
        }
        return _results;
      })()),
      name: $scope.taskName
    });
    $scope.taskName = '';
    return $scope.cache();
  };
});

app.controller('task', function($scope) {
  return $scope.deleteTask = function() {
    var index, task;
    $scope.deletedTasks.push($scope.task.id);
    index = ((function() {
      var _i, _len, _ref, _results;
      _ref = $scope.tasks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        _results.push(task.id);
      }
      return _results;
    })()).indexOf($scope.task.id);
    $scope.tasks.splice(index, 1);
    return $scope.cache();
  };
});

/* --------------------------------------------
     Begin filters.coffee
--------------------------------------------
*/


/* --------------------------------------------
     Begin services.coffee
--------------------------------------------
*/


/* --------------------------------------------
     Begin directives.coffee
--------------------------------------------
*/


/* --------------------------------------------
     Begin controllers.coffee
--------------------------------------------
*/

