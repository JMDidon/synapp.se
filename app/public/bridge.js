// Generated by CoffeeScript 1.6.3
var task, _i, _len, _ref,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function() {
  var Data, Model, client;
  client = new Dropbox.Client({
    key: '1n83me2ms50l6az'
  });
  client.authenticate(function(error, client) {
    if (error) {
      return console.log(error);
    }
  });
  Model = (function() {
    function Model(file) {
      this.file = file != null ? file : 'default.json';
    }

    Model.prototype.queue = {
      _: [],
      skip: false,
      open: function() {
        return this.skip = false;
      },
      close: function() {
        return this.skip = true;
      },
      execute: function() {
        var action, _i, _len, _ref, _results;
        _ref = this._;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          action = _ref[_i];
          _results.push(action());
        }
        return _results;
      },
      stack: function(fn) {
        if (!this.skip) {
          return this._.push(fn);
        } else {
          return fn();
        }
      }
    };

    Model.prototype._ = [];

    Model.prototype.set = function(_) {
      this._ = _;
    };

    Model.prototype.get = function() {
      return this._;
    };

    Model.prototype.load = function(callback) {
      var $this, fn;
      if (callback == null) {
        callback = false;
      }
      this.queue.open();
      $this = this;
      fn = function() {
        $this.queue.close();
        $this.queue.execute();
        if (callback) {
          return callback();
        }
      };
      return client.readFile(this.file, function(error, data) {
        if (error && error.status === Dropbox.ApiError.NOT_FOUND) {
          return $this.save(fn)();
        } else {
          $this.set(JSON.parse(data));
          return fn();
        }
      });
    };

    Model.prototype.save = function(callback) {
      var $this;
      if (callback == null) {
        callback = false;
      }
      this.queue.open();
      $this = this;
      return client.writeFile(this.file, JSON.stringify(this._), function(error, stat) {
        $this.queue.close();
        if (callback) {
          return callback();
        }
      });
    };

    Model.prototype.add = function(data) {
      var $this;
      $this = this;
      return this.queue.stack(function() {
        var id, item, k, n, output, v;
        id = ((function() {
          var _results;
          _results = [];
          while ((!n) || __indexOf.call((function() {
              var _i, _len, _ref, _results1;
              _ref = this._;
              _results1 = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                _results1.push(item.id);
              }
              return _results1;
            }).call(this), n) >= 0) {
            _results.push(n = Math.random().toString(36).substr(2, 3));
          }
          return _results;
        }).call(this)).toString();
        output = {
          id: id,
          addDate: new Date(),
          editDate: new Date(),
          status: 0
        };
        for (k in data) {
          v = data[k];
          if (__indexOf.call(Object.keys(output), k) < 0) {
            output[k] = v;
          }
        }
        $this._.push(output);
        return $this.save();
      });
    };

    Model.prototype.edit = function(id, data) {
      var $this;
      $this = this;
      return this.queue.stack(function() {
        var i, item, k, v, _i, _len, _ref;
        _ref = $this._;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          item = _ref[i];
          if (!(item.id === id)) {
            continue;
          }
          item = {
            id: id,
            addDate: item.addDate,
            editDate: new Date(),
            status: 0
          };
          for (k in data) {
            v = data[k];
            if (__indexOf.call(Object.keys(item), k) < 0) {
              item[k] = v;
            }
          }
          $this._[i] = item;
        }
        return $this.save();
      });
    };

    Model.prototype["delete"] = function(id) {
      var $this;
      $this = this;
      return this.queue.stack(function() {
        var item;
        $this._ = (function() {
          var _i, _len, _ref, _results;
          _ref = $this._;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if (item.id !== id) {
              _results.push(item);
            }
          }
          return _results;
        })();
        return $this.save();
      });
    };

    return Model;

  })();
  return window.Data = Data = {
    tasks: new Model('tasks.json')
  };
})();

Data.tasks.load();

Data.tasks.add({
  value: 'This is a test'
});

_ref = Data.tasks.get();
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  task = _ref[_i];
  Data.tasks.edit(task.id, {
    value: 'Dat ass'
  });
}
