// Generated by CoffeeScript 1.6.3
var Queue, Tasks, client;

client = new Dropbox.Client({
  key: '1n83me2ms50l6az'
});

client.authenticate(function(error, client) {
  if (error) {
    return console.log(error);
  }
});

Queue = function(fn) {
  if (Queue.skip) {
    return Queue._.push(fn);
  } else {
    return fn();
  }
};

Queue._ = [];

Queue.skip = false;

Queue.execute = function() {
  var action, _i, _len, _ref, _results;
  _ref = Queue._;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    action = _ref[_i];
    _results.push(action());
  }
  return _results;
};

Queue.disable = function() {
  return Queue.skip = true;
};

Tasks = {
  _: [],
  file: 'tasks.json',
  set: function(tasks) {
    return Tasks._ = tasks;
  },
  get: function() {
    return Tasks._;
  },
  load: function(callback) {
    return client.readFile(Tasks.file, function(error, data) {
      if (error && error.status === Dropbox.ApiError.NOT_FOUND) {
        return Tasks.save(callback)();
      } else {
        Tasks.set(JSON.parse(data));
        return callback();
      }
    });
  },
  save: function(callback) {
    return client.writeFile(Tasks.file, JSON.stringify(Tasks._, function(error, stat) {
      if (error) {
        console.log(error);
      }
      return callback();
    }));
  },
  add: function(id, value) {
    Tasks._.push({
      id: id,
      value: value
    });
    return Tasks.save();
  },
  edit: function(id, value) {
    var task, _i, _len, _ref;
    _ref = Tasks._;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      task = _ref[_i];
      if (task.id === id) {
        task.value = value;
      }
    }
    return Tasks.save();
  },
  "delete": function(id) {
    var task;
    Tasks._ = (function() {
      var _i, _len, _ref, _results;
      _ref = Tasks._;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        if (task.id !== id) {
          _results.push(task);
        }
      }
      return _results;
    })();
    return Tasks.save();
  }
};

Tasks.load(function() {
  Queue.disable();
  return Queue.execute();
});

Queue(function() {
  return Tasks.add('I0E3', 'This is a test');
});

Queue(function() {
  return Tasks.add('A3C6', 'This is a test 2');
});

Queue(function() {
  return Tasks.add('NC94', 'This is a test 3');
});

Queue(function() {
  return Tasks.add('TU43', 'This is a test 4');
});

Queue(function() {
  return Tasks["delete"]('NC94');
});

Queue(function() {
  return Tasks.add('LI91', 'This is a test 3');
});

Queue(function() {
  return Tasks.edit('I0E3', 'Dat ass');
});

Queue(function() {
  return Tasks["delete"]('A3C6');
});

Queue(function() {
  return console.log(Tasks.get());
});
