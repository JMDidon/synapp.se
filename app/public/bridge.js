// Generated by CoffeeScript 1.6.3
var Data, Model, client;

client = new Dropbox.Client({
  key: '1n83me2ms50l6az'
});

client.authenticate(function(error, client) {
  if (error) {
    return console.log(error);
  }
});

Model = (function() {
  function Model(file) {
    this.file = file != null ? file : 'default.json';
  }

  Model.prototype.queue = {
    _: [],
    skip: false,
    enable: function() {
      return this.skip = false;
    },
    disable: function() {
      return this.skip = true;
    },
    execute: function() {
      var action, _i, _len, _ref, _results;
      _ref = this._;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        _results.push(action());
      }
      return _results;
    },
    stack: function(fn) {
      if (this.skip) {
        return this._.push(fn);
      } else {
        return fn();
      }
    }
  };

  Model.prototype._ = [];

  Model.prototype.set = function(_) {
    this._ = _;
  };

  Model.prototype.get = function() {
    return this._;
  };

  Model.prototype.load = function(callback) {
    var $this, fn;
    if (callback == null) {
      callback = false;
    }
    this.queue.enable();
    $this = this;
    fn = function() {
      $this.queue.disable();
      $this.queue.execute();
      if (callback) {
        return callback();
      }
    };
    return client.readFile(this.file, function(error, data) {
      if (error && error.status === Dropbox.ApiError.NOT_FOUND) {
        return $this.save(fn)();
      } else {
        $this.set(JSON.parse(data));
        return fn();
      }
    });
  };

  Model.prototype.save = function(callback) {
    if (callback == null) {
      callback = false;
    }
    return client.writeFile(this.file, JSON.stringify(this._), function(error, stat) {
      if (error) {
        console.log(error);
      }
      if (callback) {
        return callback();
      }
    });
  };

  Model.prototype.add = function(id, value) {
    var $this;
    $this = this;
    return this.queue.stack(function() {
      $this._.push({
        id: id,
        value: value
      });
      return $this.save();
    });
  };

  Model.prototype.edit = function(id, value) {
    var $this;
    $this = this;
    return this.queue.stack(function() {
      var item, _i, _len, _ref;
      _ref = $this._;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.id === id) {
          item.value = value;
        }
      }
      return $this.save();
    });
  };

  Model.prototype["delete"] = function(id) {
    var $this;
    $this = this;
    return this.queue.stack(function() {
      var item;
      $this._ = (function() {
        var _i, _len, _ref, _results;
        _ref = $this._;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.id !== id) {
            _results.push(item);
          }
        }
        return _results;
      })();
      return $this.save();
    });
  };

  return Model;

})();

window.Data = Data = {
  tasks: new Model('tasks.json')
};

Data.tasks.load();

Data.tasks.add('I0E3', 'This is a test');

Data.tasks.add('A3C6', 'This is a test 2');

Data.tasks.add('NC94', 'This is a test 3');

Data.tasks.add('TU43', 'This is a test 4');

Data.tasks["delete"]('NC94');

Data.tasks.add('LI91', 'This is a test 3');

Data.tasks.edit('I0E3', 'Dat ass');

Data.tasks["delete"]('A3C6');

Data.tasks.queue.stack(function() {
  return console.log(Data.tasks.get());
});
